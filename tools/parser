#!/usr/bin/python

"""
Visualizes a given field.

FIELD_EXTRACTOR_NAME specifies the function name as a 
string. If you want to extract a custom field, specify
your own extractor function and define it as a global 
function.

Usage: parser <path_to_file>
path is relative to local directory
"""

import sys
import os

# Modify this to fit your own custom function naem
FIELD_EXTRACTOR_NAME = 'extractServices'

# The CSV file this will output data to
# outfile = open(os.path.join(os.getcwd(), 'data', '2010.csv'), 'w')
outfile = ''

# csv's delimiter
DELIM = ","

# --------------------------------------------
# Helpers

MONTHS = {'Jan':'01','Feb':'02','Mar':'03','Apr':'04','May':'05','Jun':'06',\
                'Jul':'07','Aug':'08','Sep':'09','Oct':'10','Nov':'11','Dec':'12'}

def transformMonth(mon):
    if mon in MONTHS:
        return MONTHS[mon] 
    else:
        return mon

def transformDttm(month, year):
    return str(year) + "-" + str(month) + "-" + "15 00:00:00"

# ------------------------------------------
# Extractors

def extractDatetime(line):
    month = line[0:2]
    year = line[2:6]
    return transformDttm(month, year)

def extractDayOfWeek(line):
    return line[6]

def extractAge(line):
    return line[7:10]

def extractSex(line):
    sex = line[10]
    # return "F" if int(sex) == 1 else "M"
    return int(sex)

def extractInjury(line):
    return int(line[27:29])

def extractMajor(line):
    return int(line[52:54])

def extractProbabilityDiagnosis1(line):
    return int(line[73:75])

def extractServices(line):
    return int(line[115])

def extractEthnicity(line):
    code = int(line[11:13])
    if code == -9:
        return "NULL"
    elif code == 1:
        return "Hisp/L"
    elif code == 2:
        return "Nonhisp/L"

def extractTimeWithMd(line):
    return int(line[291:293])

# ------------------------------------------------
# Main Execution 

line_counter = 0

def printStats():
    global line_counter
    print "Lines processed: " + str(line_counter)

def _writeline(file, line):
    file.write(line + "\n")

def writeOut(line):
    global outfile
    _writeline(outfile, line)

def processlineW(line):
    global line_counter
    fields = [
        str(globals()[FIELD_EXTRACTOR_NAME](line)),
    ]
    writeOut(DELIM.join(fields))
    line_counter += 1

def main(argv):
    global outfile

    cwd = os.getcwd()
    path = cwd
    if len(argv) >= 2:
        path = os.path.join(cwd, argv[1])

    outfile = open(path + ".csv", "w")
    with open(path) as f:
        for line in f:
            processlineW(line)
    printStats()

if __name__ == "__main__":
    main(sys.argv)
